package codegen

import (
	"fmt"
	"strings"

	"github.com/things-go/ens"
	"github.com/things-go/ens/utils"
)

func (g *CodeGen) GenMapper() *CodeGen {
	if !g.disableDocComment {
		g.Printf("// Code generated by %s. DO NOT EDIT.\n", g.byName)
		g.Printf("// version: %s\n", g.version)
		g.Println()
	}
	g.Println(`syntax = "proto3";`)
	g.Println()
	g.Printf("package %s;\n", g.packageName)
	g.Println()
	if len(g.options) > 0 {
		for k, v := range g.options {
			g.Printf("option %s = \"%s\";\n", k, v)
		}
		g.Println()
	}

	g.Println(`import "protoc-gen-openapiv2/options/annotations.proto";`)
	g.Println(`import "protosaber/seaql/seaql.proto";`)
	g.Println(`// import "protosaber/enumerate/enumerate.proto";`)
	g.Println()

	for _, et := range g.entities {
		structName := utils.CamelCase(et.Name)
		commaOrEmpty := func(r int) string {
			if r == 0 {
				return ""
			}
			return ","
		}

		g.Printf("// %s %s\n", structName, trimStructComment(et.Comment, "\n", "\n// "))
		g.Printf("message %s {\n", structName)
		if (et.Table != nil && et.Table.PrimaryKey() != nil) ||
			len(et.Indexes) > 0 || len(et.ForeignKeys) > 0 {
			g.Println("option (things_go.seaql.options) = {")
			if (et.Table != nil && et.Table.PrimaryKey() != nil) || len(et.Indexes) > 0 {
				g.Println("index: [")
				remain := len(et.Indexes)
				if et.Table != nil && et.Table.PrimaryKey() != nil {
					ending := commaOrEmpty(remain)
					g.Printf("'%s'%s\n", et.Table.PrimaryKey().Definition(), ending)
				}
				for _, index := range et.Indexes {
					remain--
					if et.Table != nil &&
						et.Table.PrimaryKey() != nil &&
						et.Table.PrimaryKey().Index().Name == index.Name {
						continue
					}
					ending := commaOrEmpty(remain)
					g.Printf("'%s'%s\n", index.Index.Definition(), ending)
				}
			}
			g.Println("],")
			if remain := len(et.ForeignKeys); remain > 0 {
				g.Println("foreign_key: [")
				for _, fk := range et.ForeignKeys {
					remain--
					ending := commaOrEmpty(remain)
					g.Printf("'%s'%s\n", fk.ForeignKey.Definition(), ending)
				}
				g.Println("],")
			}
			g.Println("};")
		}
		g.Println()
		for i, m := range et.ProtoMessage {
			if m.Comment != "" {
				g.Printf("// %s\n", m.Comment)
			}
			g.Println(genMapperMessageField(i+1, m))
		}
		g.Println("}")
	}
	return g
}

func genMapperMessageField(seq int, m *ens.ProtoMessage) string {
	annotation := ""
	if len(m.Annotations) > 0 {
		annotation = fmt.Sprintf(" [%s]", strings.Join(m.Annotations, ", "))
	}
	return fmt.Sprintf("%s %s = %d%s;", m.DataType, m.Name, seq, annotation)
}
