package codegen

import (
	"fmt"
	"strings"

	"github.com/things-go/ens"
	"github.com/things-go/ens/utils"
)

func (g *CodeGen) GenModel() *CodeGen {
	g.P("// Code generated by ", g.byName, ". DO NOT EDIT.")
	g.P("// version: ", g.version)
	g.P()
	g.P("package ", g.packageName)
	g.P()

	//* import

	imports := make(map[string]struct{})
	for _, st := range g.entities {
		for _, field := range st.Fields {
			if field.Type.PkgPath != "" {
				imports[field.Type.PkgPath] = struct{}{}
			}
		}
	}
	if len(imports) > 0 {
		g.P("import (")
		for k := range imports {
			g.P(`"`, k, `"`)
		}
		g.P(")")
	}

	//* struct
	for _, et := range g.entities {
		structName := utils.CamelCase(et.Name)
		tableName := et.Name

		g.P("// ", structName, " ", trimStructComment(et.Comment, "\n", "\n// "))
		g.P("type ", structName, " struct {")
		for _, field := range et.Fields {
			g.P(genModelStructField(field))
		}
		g.P("}")
		g.P()
		g.P("// TableName implement schema.Tabler interface")
		g.P("func (*", structName, ") TableName() string {")
		g.P(`return "`, tableName, `"`)
		g.P("}")
		g.P()

		if g.hasColumn {
			g.P("// Select", structName, " database column name.")
			g.P("var Select", structName, " = []string {")
			for _, field := range et.Fields {
				_, skip := g.skipColumns[field.Name]
				g.P(genModelStructVarField(tableName, field, skip))
			}
			g.P("}")
		}
	}
	return g
}

func genModelStructField(field *ens.FieldDescriptor) string {
	b := strings.Builder{}
	b.Grow(256)
	ident := field.Type.Ident
	if field.Optional && !field.Type.Nullable {
		ident = "*" + field.Type.Ident
	}
	// field
	b.WriteString(utils.CamelCase(field.Name))
	b.WriteString(" ")
	b.WriteString(ident)
	if len(field.Tags) > 0 {
		b.WriteString(" `")
		b.WriteString(strings.Join(field.Tags, " "))
		b.WriteString("`")
	}
	if field.Comment != "" {
		b.WriteString(" // ")
		b.WriteString(field.Comment)
	}
	return b.String()
}

func genModelStructVarField(tableName string, field *ens.FieldDescriptor, skip bool) string {
	b := strings.Builder{}
	b.Grow(64)
	if skip {
		b.WriteString("// ")
	}
	b.WriteString(`"`)
	if field.Type.IsTime() {
		if field.Nullable {
			b.WriteString(fmt.Sprintf("IFNULL(UNIX_TIMESTAMP(`%[1]s`.`%[2]s`), 0) AS `%[2]s`", tableName, field.Name))
		} else {
			b.WriteString(fmt.Sprintf("UNIX_TIMESTAMP(`%[1]s`.`%[2]s`) AS `%[2]s`", tableName, field.Name))
		}
	} else {
		b.WriteString(fmt.Sprintf("`%s`.`%s`", tableName, field.Name))
	}
	b.WriteString(`",`)
	return b.String()
}
