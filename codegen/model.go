package codegen

import (
	"fmt"
	"strings"

	"github.com/things-go/ens"
	"github.com/things-go/ens/utils"
)

func (g *CodeGen) GenModel() *CodeGen {
	if !g.disableDocComment {
		g.Printf("// Code generated by %s. DO NOT EDIT.\n", g.byName)
		g.Printf("// version: %s\n", g.version)
		g.Println()
	}
	g.Printf("package %s\n", g.packageName)
	g.Println()

	//* import
	imports := make(map[string]struct{})
	for _, st := range g.entities {
		for _, field := range st.Fields {
			if field.Type.PkgPath != "" {
				imports[field.Type.PkgPath] = struct{}{}
			}
		}
	}
	if len(imports) > 0 {
		g.Println("import (")
		for k := range imports {
			g.Printf("\"%s\"\n", k)
		}
		g.Println(")")
	}

	//* struct
	for _, et := range g.entities {
		structName := utils.CamelCase(et.Name)
		tableName := et.Name

		g.Printf("// %s %s\n", structName, trimStructComment(et.Comment, "\n", "\n// "))
		g.Printf("type %s struct {\n", structName)
		for _, field := range et.Fields {
			g.Println(genModelStructField(field))
		}
		g.Println("}")
		g.Println()
		g.Println("// TableName implement schema.Tabler interface")
		g.Printf("func (*%s) TableName() string {\n", structName)
		g.Printf("return \"%s\"\n", tableName)
		g.Println("}")
		g.Println()

		if g.hasColumn {
			g.Printf("// Select%s database column name.\n", structName)
			g.Printf("var Select%s = []string {\n", structName)
			for _, field := range et.Fields {
				_, skip := g.skipColumns[field.Name]
				g.Println(genModelStructVarField(tableName, field, skip))
			}
			g.Println("}")
		}
	}
	return g
}

func genModelStructField(field *ens.FieldDescriptor) string {
	b := strings.Builder{}
	b.Grow(256)
	ident := field.Type.Ident
	if field.Optional && !field.Type.Nullable {
		ident = "*" + field.Type.Ident
	}
	// field
	b.WriteString(utils.CamelCase(field.Name))
	b.WriteString(" ")
	b.WriteString(ident)
	if len(field.Tags) > 0 {
		b.WriteString(" `")
		b.WriteString(strings.Join(field.Tags, " "))
		b.WriteString("`")
	}
	if field.Comment != "" {
		b.WriteString(" // ")
		b.WriteString(field.Comment)
	}
	return b.String()
}

func genModelStructVarField(tableName string, field *ens.FieldDescriptor, skip bool) string {
	b := strings.Builder{}
	b.Grow(64)
	if skip {
		b.WriteString("// ")
	}
	b.WriteString(`"`)
	if field.Type.IsTime() {
		if field.Nullable {
			b.WriteString(fmt.Sprintf("IFNULL(UNIX_TIMESTAMP(`%[1]s`.`%[2]s`), 0) AS `%[2]s`", tableName, field.Name))
		} else {
			b.WriteString(fmt.Sprintf("UNIX_TIMESTAMP(`%[1]s`.`%[2]s`) AS `%[2]s`", tableName, field.Name))
		}
	} else {
		b.WriteString(fmt.Sprintf("`%s`.`%s`", tableName, field.Name))
	}
	b.WriteString(`",`)
	return b.String()
}
