// Code generated by internal/integer.tpl, DO NOT EDIT.

package ens

import (
	"reflect"
)

var _ Fielder = (*intBuilder)(nil)
var intType = reflect.TypeOf(int(0))

func IntType() *GoType {
	return NewGoType(TypeInt, int(0))
}

// Int returns a new Field with type int.
func Int(name string) *intBuilder {
	return &intBuilder{
		&FieldDescriptor{
			Name: name,
			Type: IntType(),
		},
	}
}

// intBuilder is the builder for int field.
type intBuilder struct {
	inner *FieldDescriptor
}

// Comment sets the comment of the field.
func (b *intBuilder) Comment(c string) *intBuilder {
	b.inner.Comment = c
	return b
}

// Nullable indicates that this field is a nullable.
func (b *intBuilder) Nullable() *intBuilder {
	b.inner.Nullable = true
	return b
}

// Definition set the sql definition of the field.
func (b *intBuilder) Definition(s string) *intBuilder {
	b.inner.Definition = s
	return b
}

// GoType overrides the default Go type with a custom one.
//
//	field.Int("int").
//		GoType(pkg.Int(0))
func (b *intBuilder) GoType(typ any) *intBuilder {
	b.inner.goType(typ)
	return b
}

// Optional indicates that this field is optional.
// Unlike "Nullable" only fields,
// "Optional" fields are pointers in the generated struct.
func (b *intBuilder) Optional() *intBuilder {
	b.inner.Optional = true
	return b
}

// Tags adds a list of tags to the field tag.
//
//	field.Int("int").
//		Tags("yaml:"xxx"")
func (b *intBuilder) Tags(tags ...string) *intBuilder {
	b.inner.Tags = append(b.inner.Tags, tags...)
	return b
}

// Build implements the Fielder interface by returning its descriptor.
func (b *intBuilder) Build(opt *Option) *FieldDescriptor {
	//	b.inner.checkGoType(intType)
	b.inner.build(opt)
	return b.inner
}
