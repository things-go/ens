package sqlx

import (
	"bytes"
	"fmt"
	"strings"
)

type CodeGen struct {
	buf               bytes.Buffer
	Entities          []*Table // required
	ByName            string   // required, 生成名称
	Version           string   // required, 生成版本
	DisableDocComment bool     // 禁用doc注释
}

// Bytes returns the CodeBuf's buffer.
func (g *CodeGen) Bytes() []byte {
	return g.buf.Bytes()
}

// Write appends the contents of p to the buffer,
func (g *CodeGen) Write(b []byte) (n int, err error) {
	return g.buf.Write(b)
}

// Print formats using the default formats for its operands and writes to the generated output.
// Spaces are added between operands when neither is a string.
// It returns the number of bytes written and any write error encountered.
func (g *CodeGen) Print(a ...any) (n int, err error) {
	return fmt.Fprint(&g.buf, a...)
}

// Printf formats according to a format specifier for its operands and writes to the generated output.
// It returns the number of bytes written and any write error encountered.
func (g *CodeGen) Printf(format string, a ...any) (n int, err error) {
	return fmt.Fprintf(&g.buf, format, a...)
}

// Fprintln formats using the default formats to the generated output.
// Spaces are always added between operands and a newline is appended.
// It returns the number of bytes written and any write error encountered.
func (g *CodeGen) Println(a ...any) (n int, err error) {
	return fmt.Fprintln(&g.buf, a...)
}

func (g *CodeGen) Gen() *CodeGen {
	if !g.DisableDocComment {
		g.Printf("-- Code generated by %s. DO NOT EDIT.\n", g.ByName)
		g.Printf("-- version: %s\n", g.Version)
		g.Println()
	}
	for _, tb := range g.Entities {
		g.Printf("-- %s %s\n", tb.Name, strings.ReplaceAll(strings.TrimSpace(tb.Comment), "\n", "\n-- "))
		g.Printf("%s;\n", tb.Sql)
		g.Println()
	}
	return g
}
